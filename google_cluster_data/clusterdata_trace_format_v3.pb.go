// This file defines the format of the 3rd version of cluster trace data
// published by Google. Please refer to the associated 'Google cluster-usage
// traces v3' document.
// More information at https://github.com/google/cluster-data

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: clusterdata_trace_format_v3.proto

package google_cluster_data

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Values used to indicate "not present" for special cases.
type Constants int32

const (
	Constants_NO_MACHINE          Constants = 0  // The thing is not bound to a machine.
	Constants_DEDICATED_MACHINE   Constants = -1 // The thing is bound to a dedicated machine.
	Constants_NO_ALLOC_COLLECTION Constants = 0  // The thing is not running in an alloc set.
	Constants_NO_ALLOC_INDEX      Constants = -1 // The thing does not have an alloc instance index.
)

// Enum value maps for Constants.
var (
	Constants_name = map[int32]string{
		0:  "NO_MACHINE",
		-1: "DEDICATED_MACHINE",
		// Duplicate value: 0: "NO_ALLOC_COLLECTION",
		// Duplicate value: -1: "NO_ALLOC_INDEX",
	}
	Constants_value = map[string]int32{
		"NO_MACHINE":          0,
		"DEDICATED_MACHINE":   -1,
		"NO_ALLOC_COLLECTION": 0,
		"NO_ALLOC_INDEX":      -1,
	}
)

func (x Constants) Enum() *Constants {
	p := new(Constants)
	*p = x
	return p
}

func (x Constants) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Constants) Descriptor() protoreflect.EnumDescriptor {
	return file_clusterdata_trace_format_v3_proto_enumTypes[0].Descriptor()
}

func (Constants) Type() protoreflect.EnumType {
	return &file_clusterdata_trace_format_v3_proto_enumTypes[0]
}

func (x Constants) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Constants) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Constants(num)
	return nil
}

// Deprecated: Use Constants.Descriptor instead.
func (Constants) EnumDescriptor() ([]byte, []int) {
	return file_clusterdata_trace_format_v3_proto_rawDescGZIP(), []int{0}
}

// Collections are either jobs (which have tasks) or alloc sets (which have
// alloc instances).
type CollectionType int32

const (
	CollectionType_JOB       CollectionType = 0
	CollectionType_ALLOC_SET CollectionType = 1
)

// Enum value maps for CollectionType.
var (
	CollectionType_name = map[int32]string{
		0: "JOB",
		1: "ALLOC_SET",
	}
	CollectionType_value = map[string]int32{
		"JOB":       0,
		"ALLOC_SET": 1,
	}
)

func (x CollectionType) Enum() *CollectionType {
	p := new(CollectionType)
	*p = x
	return p
}

func (x CollectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_clusterdata_trace_format_v3_proto_enumTypes[1].Descriptor()
}

func (CollectionType) Type() protoreflect.EnumType {
	return &file_clusterdata_trace_format_v3_proto_enumTypes[1]
}

func (x CollectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CollectionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CollectionType(num)
	return nil
}

// Deprecated: Use CollectionType.Descriptor instead.
func (CollectionType) EnumDescriptor() ([]byte, []int) {
	return file_clusterdata_trace_format_v3_proto_rawDescGZIP(), []int{1}
}

// This enum is used in the 'type' field of the CollectionEvent and
// InstanceEvent tables.
type EventType int32

const (
	// The collection or instance was submitted to the scheduler for scheduling.
	EventType_SUBMIT EventType = 0
	// The collection or instance was marked not eligible for scheduling by the
	// batch scheduler.
	EventType_QUEUE EventType = 1
	// The collection or instance became eligible for scheduling.
	EventType_ENABLE EventType = 2
	// The collection or instance started running.
	EventType_SCHEDULE EventType = 3
	// The collection or instance was descheduled because of a higher priority
	// collection or instance, or because the scheduler overcommitted resources.
	EventType_EVICT EventType = 4
	// The collection or instance was descheduled due to a failure.
	EventType_FAIL EventType = 5
	// The collection or instance completed normally.
	EventType_FINISH EventType = 6
	// The collection or instance was cancelled by the user or because a
	// depended-upon collection died.
	EventType_KILL EventType = 7
	// The collection or instance was presumably terminated, but due to missing
	// data there is insufficient information to identify when or how.
	EventType_LOST EventType = 8
	// The collection or instance was updated (scheduling class or resource
	// requirements) while it was waiting to be scheduled.
	EventType_UPDATE_PENDING EventType = 9
	// The collection or instance was updated while it was scheduled somewhere.
	EventType_UPDATE_RUNNING EventType = 10
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:  "SUBMIT",
		1:  "QUEUE",
		2:  "ENABLE",
		3:  "SCHEDULE",
		4:  "EVICT",
		5:  "FAIL",
		6:  "FINISH",
		7:  "KILL",
		8:  "LOST",
		9:  "UPDATE_PENDING",
		10: "UPDATE_RUNNING",
	}
	EventType_value = map[string]int32{
		"SUBMIT":         0,
		"QUEUE":          1,
		"ENABLE":         2,
		"SCHEDULE":       3,
		"EVICT":          4,
		"FAIL":           5,
		"FINISH":         6,
		"KILL":           7,
		"LOST":           8,
		"UPDATE_PENDING": 9,
		"UPDATE_RUNNING": 10,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_clusterdata_trace_format_v3_proto_enumTypes[2].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_clusterdata_trace_format_v3_proto_enumTypes[2]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EventType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EventType(num)
	return nil
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_clusterdata_trace_format_v3_proto_rawDescGZIP(), []int{2}
}

// Represents reasons why we synthesized a scheduler event to replace
// apparently missing data.
type MissingType int32

const (
	MissingType_MISSING_TYPE_NONE          MissingType = 0 // No data was missing.
	MissingType_SNAPSHOT_BUT_NO_TRANSITION MissingType = 1
	MissingType_NO_SNAPSHOT_OR_TRANSITION  MissingType = 2
	MissingType_EXISTS_BUT_NO_CREATION     MissingType = 3
	MissingType_TRANSITION_MISSING_STEP    MissingType = 4
	MissingType_TOO_MANY_EVENTS            MissingType = 5
)

// Enum value maps for MissingType.
var (
	MissingType_name = map[int32]string{
		0: "MISSING_TYPE_NONE",
		1: "SNAPSHOT_BUT_NO_TRANSITION",
		2: "NO_SNAPSHOT_OR_TRANSITION",
		3: "EXISTS_BUT_NO_CREATION",
		4: "TRANSITION_MISSING_STEP",
		5: "TOO_MANY_EVENTS",
	}
	MissingType_value = map[string]int32{
		"MISSING_TYPE_NONE":          0,
		"SNAPSHOT_BUT_NO_TRANSITION": 1,
		"NO_SNAPSHOT_OR_TRANSITION":  2,
		"EXISTS_BUT_NO_CREATION":     3,
		"TRANSITION_MISSING_STEP":    4,
		"TOO_MANY_EVENTS":            5,
	}
)

func (x MissingType) Enum() *MissingType {
	p := new(MissingType)
	*p = x
	return p
}

func (x MissingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MissingType) Descriptor() protoreflect.EnumDescriptor {
	return file_clusterdata_trace_format_v3_proto_enumTypes[3].Descriptor()
}

func (MissingType) Type() protoreflect.EnumType {
	return &file_clusterdata_trace_format_v3_proto_enumTypes[3]
}

func (x MissingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MissingType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MissingType(num)
	return nil
}

// Deprecated: Use MissingType.Descriptor instead.
func (MissingType) EnumDescriptor() ([]byte, []int) {
	return file_clusterdata_trace_format_v3_proto_rawDescGZIP(), []int{3}
}

// How latency-sensitive a thing is to CPU scheduling delays when running
// on a machine, in increasing-sensitivity order.
// Note that this is _not_ the same as the thing's cluster-scheduling
// priority although latency-sensitive things do tend to have higher priorities.
type LatencySensitivity int32

const (
	LatencySensitivity_MOST_INSENSITIVE LatencySensitivity = 0 // Also known as "best effort".
	LatencySensitivity_INSENSITIVE      LatencySensitivity = 1 // Often used for batch jobs.
	LatencySensitivity_SENSITIVE        LatencySensitivity = 2 // Used for latency-sensitive jobs.
	LatencySensitivity_MOST_SENSITIVE   LatencySensitivity = 3 // Used for the most latency-senstive jobs.
)

// Enum value maps for LatencySensitivity.
var (
	LatencySensitivity_name = map[int32]string{
		0: "MOST_INSENSITIVE",
		1: "INSENSITIVE",
		2: "SENSITIVE",
		3: "MOST_SENSITIVE",
	}
	LatencySensitivity_value = map[string]int32{
		"MOST_INSENSITIVE": 0,
		"INSENSITIVE":      1,
		"SENSITIVE":        2,
		"MOST_SENSITIVE":   3,
	}
)

func (x LatencySensitivity) Enum() *LatencySensitivity {
	p := new(LatencySensitivity)
	*p = x
	return p
}

func (x LatencySensitivity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LatencySensitivity) Descriptor() protoreflect.EnumDescriptor {
	return file_clusterdata_trace_format_v3_proto_enumTypes[4].Descriptor()
}

func (LatencySensitivity) Type() protoreflect.EnumType {
	return &file_clusterdata_trace_format_v3_proto_enumTypes[4]
}

func (x LatencySensitivity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LatencySensitivity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LatencySensitivity(num)
	return nil
}

// Deprecated: Use LatencySensitivity.Descriptor instead.
func (LatencySensitivity) EnumDescriptor() ([]byte, []int) {
	return file_clusterdata_trace_format_v3_proto_rawDescGZIP(), []int{4}
}

// Represents the type of scheduler that is handling a job.
type Scheduler int32

const (
	// Handled by the default cluster scheduler.
	Scheduler_SCHEDULER_DEFAULT Scheduler = 0
	// Handled by a secondary scheduler, optimized for batch loads.
	Scheduler_SCHEDULER_BATCH Scheduler = 1
)

// Enum value maps for Scheduler.
var (
	Scheduler_name = map[int32]string{
		0: "SCHEDULER_DEFAULT",
		1: "SCHEDULER_BATCH",
	}
	Scheduler_value = map[string]int32{
		"SCHEDULER_DEFAULT": 0,
		"SCHEDULER_BATCH":   1,
	}
)

func (x Scheduler) Enum() *Scheduler {
	p := new(Scheduler)
	*p = x
	return p
}

func (x Scheduler) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Scheduler) Descriptor() protoreflect.EnumDescriptor {
	return file_clusterdata_trace_format_v3_proto_enumTypes[5].Descriptor()
}

func (Scheduler) Type() protoreflect.EnumType {
	return &file_clusterdata_trace_format_v3_proto_enumTypes[5]
}

func (x Scheduler) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Scheduler) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Scheduler(num)
	return nil
}

// Deprecated: Use Scheduler.Descriptor instead.
func (Scheduler) EnumDescriptor() ([]byte, []int) {
	return file_clusterdata_trace_format_v3_proto_rawDescGZIP(), []int{5}
}

// How the collection is verically auto-scaled.
type VerticalScalingSetting int32

const (
	// We were unable to determine the setting.
	VerticalScalingSetting_VERTICAL_SCALING_SETTING_UNKNOWN VerticalScalingSetting = 0
	// Vertical scaling was disabled, e.g., in the collection
	// creation request.
	VerticalScalingSetting_VERTICAL_SCALING_OFF VerticalScalingSetting = 1
	// Vertical scaling was enabled, with user-supplied lower
	// and/or upper bounds for GCU and/or RAM.
	VerticalScalingSetting_VERTICAL_SCALING_CONSTRAINED VerticalScalingSetting = 2
	// Vertical scaling was enabled, with no user-provided bounds.
	VerticalScalingSetting_VERTICAL_SCALING_FULLY_AUTOMATED VerticalScalingSetting = 3
)

// Enum value maps for VerticalScalingSetting.
var (
	VerticalScalingSetting_name = map[int32]string{
		0: "VERTICAL_SCALING_SETTING_UNKNOWN",
		1: "VERTICAL_SCALING_OFF",
		2: "VERTICAL_SCALING_CONSTRAINED",
		3: "VERTICAL_SCALING_FULLY_AUTOMATED",
	}
	VerticalScalingSetting_value = map[string]int32{
		"VERTICAL_SCALING_SETTING_UNKNOWN": 0,
		"VERTICAL_SCALING_OFF":             1,
		"VERTICAL_SCALING_CONSTRAINED":     2,
		"VERTICAL_SCALING_FULLY_AUTOMATED": 3,
	}
)

func (x VerticalScalingSetting) Enum() *VerticalScalingSetting {
	p := new(VerticalScalingSetting)
	*p = x
	return p
}

func (x VerticalScalingSetting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerticalScalingSetting) Descriptor() protoreflect.EnumDescriptor {
	return file_clusterdata_trace_format_v3_proto_enumTypes[6].Descriptor()
}

func (VerticalScalingSetting) Type() protoreflect.EnumType {
	return &file_clusterdata_trace_format_v3_proto_enumTypes[6]
}

func (x VerticalScalingSetting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VerticalScalingSetting) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VerticalScalingSetting(num)
	return nil
}

// Deprecated: Use VerticalScalingSetting.Descriptor instead.
func (VerticalScalingSetting) EnumDescriptor() ([]byte, []int) {
	return file_clusterdata_trace_format_v3_proto_rawDescGZIP(), []int{6}
}

// Comparison operation between the supplied value and the machine's value.
// For EQUAL and NOT_EQUAL relationships, the comparison is a string
// comparison; for LESS_THAN, GREATER_THAN, etc., the values are converted to
// floating point numbers first; for PRESENT and NOT_PRESENT, the test is
// merely whether the supplied attribute exists for the machine in question,
// and the value field of the constraint is ignored.
type MachineConstraint_Relation int32

const (
	MachineConstraint_EQUAL              MachineConstraint_Relation = 0
	MachineConstraint_NOT_EQUAL          MachineConstraint_Relation = 1
	MachineConstraint_LESS_THAN          MachineConstraint_Relation = 2
	MachineConstraint_GREATER_THAN       MachineConstraint_Relation = 3
	MachineConstraint_LESS_THAN_EQUAL    MachineConstraint_Relation = 4
	MachineConstraint_GREATER_THAN_EQUAL MachineConstraint_Relation = 5
	MachineConstraint_PRESENT            MachineConstraint_Relation = 6
	MachineConstraint_NOT_PRESENT        MachineConstraint_Relation = 7
)

// Enum value maps for MachineConstraint_Relation.
var (
	MachineConstraint_Relation_name = map[int32]string{
		0: "EQUAL",
		1: "NOT_EQUAL",
		2: "LESS_THAN",
		3: "GREATER_THAN",
		4: "LESS_THAN_EQUAL",
		5: "GREATER_THAN_EQUAL",
		6: "PRESENT",
		7: "NOT_PRESENT",
	}
	MachineConstraint_Relation_value = map[string]int32{
		"EQUAL":              0,
		"NOT_EQUAL":          1,
		"LESS_THAN":          2,
		"GREATER_THAN":       3,
		"LESS_THAN_EQUAL":    4,
		"GREATER_THAN_EQUAL": 5,
		"PRESENT":            6,
		"NOT_PRESENT":        7,
	}
)

func (x MachineConstraint_Relation) Enum() *MachineConstraint_Relation {
	p := new(MachineConstraint_Relation)
	*p = x
	return p
}

func (x MachineConstraint_Relation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MachineConstraint_Relation) Descriptor() protoreflect.EnumDescriptor {
	return file_clusterdata_trace_format_v3_proto_enumTypes[7].Descriptor()
}

func (MachineConstraint_Relation) Type() protoreflect.EnumType {
	return &file_clusterdata_trace_format_v3_proto_enumTypes[7]
}

func (x MachineConstraint_Relation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MachineConstraint_Relation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MachineConstraint_Relation(num)
	return nil
}

// Deprecated: Use MachineConstraint_Relation.Descriptor instead.
func (MachineConstraint_Relation) EnumDescriptor() ([]byte, []int) {
	return file_clusterdata_trace_format_v3_proto_rawDescGZIP(), []int{1, 0}
}

type MachineEvent_EventType int32

const (
	// Should never happen :-).
	MachineEvent_EVENT_TYPE_UNKNOWN MachineEvent_EventType = 0
	// Machine added to the cluster.
	MachineEvent_ADD MachineEvent_EventType = 1
	// Machine removed from cluster (usually due to failure or repairs).
	MachineEvent_REMOVE MachineEvent_EventType = 2
	// Machine capacity updated (while not removed).
	MachineEvent_UPDATE MachineEvent_EventType = 3
)

// Enum value maps for MachineEvent_EventType.
var (
	MachineEvent_EventType_name = map[int32]string{
		0: "EVENT_TYPE_UNKNOWN",
		1: "ADD",
		2: "REMOVE",
		3: "UPDATE",
	}
	MachineEvent_EventType_value = map[string]int32{
		"EVENT_TYPE_UNKNOWN": 0,
		"ADD":                1,
		"REMOVE":             2,
		"UPDATE":             3,
	}
)

func (x MachineEvent_EventType) Enum() *MachineEvent_EventType {
	p := new(MachineEvent_EventType)
	*p = x
	return p
}

func (x MachineEvent_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MachineEvent_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_clusterdata_trace_format_v3_proto_enumTypes[8].Descriptor()
}

func (MachineEvent_EventType) Type() protoreflect.EnumType {
	return &file_clusterdata_trace_format_v3_proto_enumTypes[8]
}

func (x MachineEvent_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MachineEvent_EventType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MachineEvent_EventType(num)
	return nil
}

// Deprecated: Use MachineEvent_EventType.Descriptor instead.
func (MachineEvent_EventType) EnumDescriptor() ([]byte, []int) {
	return file_clusterdata_trace_format_v3_proto_rawDescGZIP(), []int{4, 0}
}

// If we detect that data is missing, why do we know this?
type MachineEvent_MissingDataReason int32

const (
	// No data is missing.
	MachineEvent_MISSING_DATA_REASON_NONE MachineEvent_MissingDataReason = 0
	// We observed that a change to the state of a machine must have
	// occurred from an internal state snapshot, but did not see a
	// corresponding transition event during the trace.
	MachineEvent_SNAPSHOT_BUT_NO_TRANSITION MachineEvent_MissingDataReason = 1
)

// Enum value maps for MachineEvent_MissingDataReason.
var (
	MachineEvent_MissingDataReason_name = map[int32]string{
		0: "MISSING_DATA_REASON_NONE",
		1: "SNAPSHOT_BUT_NO_TRANSITION",
	}
	MachineEvent_MissingDataReason_value = map[string]int32{
		"MISSING_DATA_REASON_NONE":   0,
		"SNAPSHOT_BUT_NO_TRANSITION": 1,
	}
)

func (x MachineEvent_MissingDataReason) Enum() *MachineEvent_MissingDataReason {
	p := new(MachineEvent_MissingDataReason)
	*p = x
	return p
}

func (x MachineEvent_MissingDataReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MachineEvent_MissingDataReason) Descriptor() protoreflect.EnumDescriptor {
	return file_clusterdata_trace_format_v3_proto_enumTypes[9].Descriptor()
}

func (MachineEvent_MissingDataReason) Type() protoreflect.EnumType {
	return &file_clusterdata_trace_format_v3_proto_enumTypes[9]
}

func (x MachineEvent_MissingDataReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MachineEvent_MissingDataReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MachineEvent_MissingDataReason(num)
	return nil
}

// Deprecated: Use MachineEvent_MissingDataReason.Descriptor instead.
func (MachineEvent_MissingDataReason) EnumDescriptor() ([]byte, []int) {
	return file_clusterdata_trace_format_v3_proto_rawDescGZIP(), []int{4, 1}
}

// A common structure for CPU and memory resource units.
// All resource measurements are normalized and scaled.
type Resources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpus   *float32 `protobuf:"fixed32,1,opt,name=cpus" json:"cpus,omitempty"`     // Normalized GCUs (NCUs).
	Memory *float32 `protobuf:"fixed32,2,opt,name=memory" json:"memory,omitempty"` // Normalized RAM bytes.
}

func (x *Resources) Reset() {
	*x = Resources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clusterdata_trace_format_v3_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resources) ProtoMessage() {}

func (x *Resources) ProtoReflect() protoreflect.Message {
	mi := &file_clusterdata_trace_format_v3_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resources.ProtoReflect.Descriptor instead.
func (*Resources) Descriptor() ([]byte, []int) {
	return file_clusterdata_trace_format_v3_proto_rawDescGZIP(), []int{0}
}

func (x *Resources) GetCpus() float32 {
	if x != nil && x.Cpus != nil {
		return *x.Cpus
	}
	return 0
}

func (x *Resources) GetMemory() float32 {
	if x != nil && x.Memory != nil {
		return *x.Memory
	}
	return 0
}

// A constraint represents a request for a thing to be placed on a machine
// (or machines) with particular attributes.
type MachineConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Obfuscated name of the constraint.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Target value for the constraint (e.g., a minimum or equality).
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	// Comparison operator.
	Relation *MachineConstraint_Relation `protobuf:"varint,3,opt,name=relation,enum=google.cluster_data.MachineConstraint_Relation" json:"relation,omitempty"`
}

func (x *MachineConstraint) Reset() {
	*x = MachineConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clusterdata_trace_format_v3_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineConstraint) ProtoMessage() {}

func (x *MachineConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_clusterdata_trace_format_v3_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineConstraint.ProtoReflect.Descriptor instead.
func (*MachineConstraint) Descriptor() ([]byte, []int) {
	return file_clusterdata_trace_format_v3_proto_rawDescGZIP(), []int{1}
}

func (x *MachineConstraint) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MachineConstraint) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *MachineConstraint) GetRelation() MachineConstraint_Relation {
	if x != nil && x.Relation != nil {
		return *x.Relation
	}
	return MachineConstraint_EQUAL
}

// Instance and collection events both share a common prefix, followed by
// specific fields. Information about an instance event (task or alloc
// instance).
type InstanceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp, in microseconds since the start of the trace.
	Time *int64 `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	// What type of event is this?
	Type *EventType `protobuf:"varint,2,opt,name=type,enum=google.cluster_data.EventType" json:"type,omitempty"`
	// The identity of the collection that this instance is part of.
	CollectionId *int64 `protobuf:"varint,3,opt,name=collection_id,json=collectionId" json:"collection_id,omitempty"`
	// How latency-sensitive is the instance?
	SchedulingClass *LatencySensitivity `protobuf:"varint,4,opt,name=scheduling_class,json=schedulingClass,enum=google.cluster_data.LatencySensitivity" json:"scheduling_class,omitempty"`
	// Was there any missing data?  If so, why?
	MissingType *MissingType `protobuf:"varint,5,opt,name=missing_type,json=missingType,enum=google.cluster_data.MissingType" json:"missing_type,omitempty"`
	// What type of collection this instance belongs to.
	CollectionType *CollectionType `protobuf:"varint,6,opt,name=collection_type,json=collectionType,enum=google.cluster_data.CollectionType" json:"collection_type,omitempty"`
	// Cluster-level scheduling priority for the instance.
	Priority *int32 `protobuf:"varint,7,opt,name=priority" json:"priority,omitempty"`
	// (Tasks only) The ID of the alloc set that this task is running in, or
	// NO_ALLOC_COLLECTION if it is not running in an alloc.
	AllocCollectionId *int64 `protobuf:"varint,8,opt,name=alloc_collection_id,json=allocCollectionId" json:"alloc_collection_id,omitempty"`
	// Begin: fields specific to instances
	// The index of the instance in its collection (starts at 0).
	InstanceIndex *int32 `protobuf:"varint,9,opt,name=instance_index,json=instanceIndex" json:"instance_index,omitempty"`
	// The ID of the machine on which this instance is placed (or NO_MACHINE if
	// not placed on one, or DEDICATED_MACHINE if it's on a dedicated machine).
	MachineId *int64 `protobuf:"varint,10,opt,name=machine_id,json=machineId" json:"machine_id,omitempty"`
	// (Tasks only) The index of the alloc instance that this task is running in,
	// or NO_ALLOC_INDEX if it is not running in an alloc.
	AllocInstanceIndex *int32 `protobuf:"varint,11,opt,name=alloc_instance_index,json=allocInstanceIndex" json:"alloc_instance_index,omitempty"`
	// The resources requested when the instance was submitted or last updated.
	ResourceRequest *Resources `protobuf:"bytes,12,opt,name=resource_request,json=resourceRequest" json:"resource_request,omitempty"`
	// Currently active scheduling constraints.
	Constraint []*MachineConstraint `protobuf:"bytes,13,rep,name=constraint" json:"constraint,omitempty"`
}

func (x *InstanceEvent) Reset() {
	*x = InstanceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clusterdata_trace_format_v3_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceEvent) ProtoMessage() {}

func (x *InstanceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_clusterdata_trace_format_v3_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceEvent.ProtoReflect.Descriptor instead.
func (*InstanceEvent) Descriptor() ([]byte, []int) {
	return file_clusterdata_trace_format_v3_proto_rawDescGZIP(), []int{2}
}

func (x *InstanceEvent) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *InstanceEvent) GetType() EventType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EventType_SUBMIT
}

func (x *InstanceEvent) GetCollectionId() int64 {
	if x != nil && x.CollectionId != nil {
		return *x.CollectionId
	}
	return 0
}

func (x *InstanceEvent) GetSchedulingClass() LatencySensitivity {
	if x != nil && x.SchedulingClass != nil {
		return *x.SchedulingClass
	}
	return LatencySensitivity_MOST_INSENSITIVE
}

func (x *InstanceEvent) GetMissingType() MissingType {
	if x != nil && x.MissingType != nil {
		return *x.MissingType
	}
	return MissingType_MISSING_TYPE_NONE
}

func (x *InstanceEvent) GetCollectionType() CollectionType {
	if x != nil && x.CollectionType != nil {
		return *x.CollectionType
	}
	return CollectionType_JOB
}

func (x *InstanceEvent) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *InstanceEvent) GetAllocCollectionId() int64 {
	if x != nil && x.AllocCollectionId != nil {
		return *x.AllocCollectionId
	}
	return 0
}

func (x *InstanceEvent) GetInstanceIndex() int32 {
	if x != nil && x.InstanceIndex != nil {
		return *x.InstanceIndex
	}
	return 0
}

func (x *InstanceEvent) GetMachineId() int64 {
	if x != nil && x.MachineId != nil {
		return *x.MachineId
	}
	return 0
}

func (x *InstanceEvent) GetAllocInstanceIndex() int32 {
	if x != nil && x.AllocInstanceIndex != nil {
		return *x.AllocInstanceIndex
	}
	return 0
}

func (x *InstanceEvent) GetResourceRequest() *Resources {
	if x != nil {
		return x.ResourceRequest
	}
	return nil
}

func (x *InstanceEvent) GetConstraint() []*MachineConstraint {
	if x != nil {
		return x.Constraint
	}
	return nil
}

// Collection events apply to the collection as a whole.
type CollectionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp, in microseconds since the start of the trace.
	Time *int64 `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	// What type of event is this?
	Type *EventType `protobuf:"varint,2,opt,name=type,enum=google.cluster_data.EventType" json:"type,omitempty"`
	// The identity of the collection.
	CollectionId *int64 `protobuf:"varint,3,opt,name=collection_id,json=collectionId" json:"collection_id,omitempty"`
	// How latency-sensitive is the collection?
	SchedulingClass *LatencySensitivity `protobuf:"varint,4,opt,name=scheduling_class,json=schedulingClass,enum=google.cluster_data.LatencySensitivity" json:"scheduling_class,omitempty"`
	// Was there any missing data?  If so, why?
	MissingType *MissingType `protobuf:"varint,5,opt,name=missing_type,json=missingType,enum=google.cluster_data.MissingType" json:"missing_type,omitempty"`
	// What type of collection is this?
	CollectionType *CollectionType `protobuf:"varint,6,opt,name=collection_type,json=collectionType,enum=google.cluster_data.CollectionType" json:"collection_type,omitempty"`
	// Cluster-level scheduling priority for the collection.
	Priority *int32 `protobuf:"varint,7,opt,name=priority" json:"priority,omitempty"`
	// The ID of the alloc set that this job is to run in, or NO_ALLOC_COLLECTION
	// (only for jobs).
	AllocCollectionId *int64 `protobuf:"varint,8,opt,name=alloc_collection_id,json=allocCollectionId" json:"alloc_collection_id,omitempty"`
	// The user who runs the collection
	User *string `protobuf:"bytes,9,opt,name=user" json:"user,omitempty"`
	// Obfuscated name of the collection.
	CollectionName *string `protobuf:"bytes,10,opt,name=collection_name,json=collectionName" json:"collection_name,omitempty"`
	// Obfuscated logical name of the collection.
	CollectionLogicalName *string `protobuf:"bytes,11,opt,name=collection_logical_name,json=collectionLogicalName" json:"collection_logical_name,omitempty"`
	// ID of the collection that this is a child of.
	// (Used for stopping a collection when the parent terminates.)
	ParentCollectionId *int64 `protobuf:"varint,12,opt,name=parent_collection_id,json=parentCollectionId" json:"parent_collection_id,omitempty"`
	// IDs of collections that must finish before this collection may start.
	StartAfterCollectionIds []int64 `protobuf:"varint,13,rep,name=start_after_collection_ids,json=startAfterCollectionIds" json:"start_after_collection_ids,omitempty"`
	// Maximum number of instances of this collection that may be placed on
	// one machine (or 0 if unlimited).
	MaxPerMachine *int32 `protobuf:"varint,14,opt,name=max_per_machine,json=maxPerMachine" json:"max_per_machine,omitempty"`
	// Maximum number of instances of this collection that may be placed on
	// machines connected to a single Top of Rack switch (or 0 if unlimited).
	MaxPerSwitch *int32 `protobuf:"varint,15,opt,name=max_per_switch,json=maxPerSwitch" json:"max_per_switch,omitempty"`
	// How/whether vertical scaling should be done for this collection.
	VerticalScaling *VerticalScalingSetting `protobuf:"varint,16,opt,name=vertical_scaling,json=verticalScaling,enum=google.cluster_data.VerticalScalingSetting" json:"vertical_scaling,omitempty"`
	// The preferred cluster scheduler to use.
	Scheduler *Scheduler `protobuf:"varint,17,opt,name=scheduler,enum=google.cluster_data.Scheduler" json:"scheduler,omitempty"`
}

func (x *CollectionEvent) Reset() {
	*x = CollectionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clusterdata_trace_format_v3_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionEvent) ProtoMessage() {}

func (x *CollectionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_clusterdata_trace_format_v3_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionEvent.ProtoReflect.Descriptor instead.
func (*CollectionEvent) Descriptor() ([]byte, []int) {
	return file_clusterdata_trace_format_v3_proto_rawDescGZIP(), []int{3}
}

func (x *CollectionEvent) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *CollectionEvent) GetType() EventType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EventType_SUBMIT
}

func (x *CollectionEvent) GetCollectionId() int64 {
	if x != nil && x.CollectionId != nil {
		return *x.CollectionId
	}
	return 0
}

func (x *CollectionEvent) GetSchedulingClass() LatencySensitivity {
	if x != nil && x.SchedulingClass != nil {
		return *x.SchedulingClass
	}
	return LatencySensitivity_MOST_INSENSITIVE
}

func (x *CollectionEvent) GetMissingType() MissingType {
	if x != nil && x.MissingType != nil {
		return *x.MissingType
	}
	return MissingType_MISSING_TYPE_NONE
}

func (x *CollectionEvent) GetCollectionType() CollectionType {
	if x != nil && x.CollectionType != nil {
		return *x.CollectionType
	}
	return CollectionType_JOB
}

func (x *CollectionEvent) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *CollectionEvent) GetAllocCollectionId() int64 {
	if x != nil && x.AllocCollectionId != nil {
		return *x.AllocCollectionId
	}
	return 0
}

func (x *CollectionEvent) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *CollectionEvent) GetCollectionName() string {
	if x != nil && x.CollectionName != nil {
		return *x.CollectionName
	}
	return ""
}

func (x *CollectionEvent) GetCollectionLogicalName() string {
	if x != nil && x.CollectionLogicalName != nil {
		return *x.CollectionLogicalName
	}
	return ""
}

func (x *CollectionEvent) GetParentCollectionId() int64 {
	if x != nil && x.ParentCollectionId != nil {
		return *x.ParentCollectionId
	}
	return 0
}

func (x *CollectionEvent) GetStartAfterCollectionIds() []int64 {
	if x != nil {
		return x.StartAfterCollectionIds
	}
	return nil
}

func (x *CollectionEvent) GetMaxPerMachine() int32 {
	if x != nil && x.MaxPerMachine != nil {
		return *x.MaxPerMachine
	}
	return 0
}

func (x *CollectionEvent) GetMaxPerSwitch() int32 {
	if x != nil && x.MaxPerSwitch != nil {
		return *x.MaxPerSwitch
	}
	return 0
}

func (x *CollectionEvent) GetVerticalScaling() VerticalScalingSetting {
	if x != nil && x.VerticalScaling != nil {
		return *x.VerticalScaling
	}
	return VerticalScalingSetting_VERTICAL_SCALING_SETTING_UNKNOWN
}

func (x *CollectionEvent) GetScheduler() Scheduler {
	if x != nil && x.Scheduler != nil {
		return *x.Scheduler
	}
	return Scheduler_SCHEDULER_DEFAULT
}

// Machine events describe the addition, removal, or update (change) of a
// machine in the cluster at a particular time.
type MachineEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp, in microseconds since the start of the trace. [key]
	Time *int64 `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	// Unique ID of the machine within the cluster. [key]
	MachineId *int64 `protobuf:"varint,2,opt,name=machine_id,json=machineId" json:"machine_id,omitempty"`
	// Specifies the type of event
	Type *MachineEvent_EventType `protobuf:"varint,3,opt,name=type,enum=google.cluster_data.MachineEvent_EventType" json:"type,omitempty"`
	// Obfuscated name of the Top of Rack switch that this machine is attached to.
	SwitchId *string `protobuf:"bytes,4,opt,name=switch_id,json=switchId" json:"switch_id,omitempty"`
	// Available resources that the machine supplies.  (Note: may be smaller
	// than the physical machine's raw capacity.)
	Capacity *Resources `protobuf:"bytes,5,opt,name=capacity" json:"capacity,omitempty"`
	// An obfuscated form of the machine platform (microarchitecture + motherboard
	// design).
	PlatformId *string `protobuf:"bytes,6,opt,name=platform_id,json=platformId" json:"platform_id,omitempty"`
	// Did we detect possibly-missing data?
	MissingDataReason *MachineEvent_MissingDataReason `protobuf:"varint,7,opt,name=missing_data_reason,json=missingDataReason,enum=google.cluster_data.MachineEvent_MissingDataReason" json:"missing_data_reason,omitempty"`
}

func (x *MachineEvent) Reset() {
	*x = MachineEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clusterdata_trace_format_v3_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineEvent) ProtoMessage() {}

func (x *MachineEvent) ProtoReflect() protoreflect.Message {
	mi := &file_clusterdata_trace_format_v3_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineEvent.ProtoReflect.Descriptor instead.
func (*MachineEvent) Descriptor() ([]byte, []int) {
	return file_clusterdata_trace_format_v3_proto_rawDescGZIP(), []int{4}
}

func (x *MachineEvent) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *MachineEvent) GetMachineId() int64 {
	if x != nil && x.MachineId != nil {
		return *x.MachineId
	}
	return 0
}

func (x *MachineEvent) GetType() MachineEvent_EventType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return MachineEvent_EVENT_TYPE_UNKNOWN
}

func (x *MachineEvent) GetSwitchId() string {
	if x != nil && x.SwitchId != nil {
		return *x.SwitchId
	}
	return ""
}

func (x *MachineEvent) GetCapacity() *Resources {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *MachineEvent) GetPlatformId() string {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return ""
}

func (x *MachineEvent) GetMissingDataReason() MachineEvent_MissingDataReason {
	if x != nil && x.MissingDataReason != nil {
		return *x.MissingDataReason
	}
	return MachineEvent_MISSING_DATA_REASON_NONE
}

// A machine attribute update or (if time = 0) its initial value.
type MachineAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp, in microseconds since the start of the trace. [key]
	Time *int64 `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	// Unique ID of the machine within the cluster. [key]
	MachineId *int64 `protobuf:"varint,2,opt,name=machine_id,json=machineId" json:"machine_id,omitempty"`
	// Obfuscated unique name of the attribute (unique across all clusters). [key]
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// Value of the attribute.  If this is unset, then 'deleted' must be true.
	Value *string `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	// True if the attribute is being deleted at this time.
	Deleted *bool `protobuf:"varint,5,opt,name=deleted" json:"deleted,omitempty"`
}

func (x *MachineAttribute) Reset() {
	*x = MachineAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clusterdata_trace_format_v3_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineAttribute) ProtoMessage() {}

func (x *MachineAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_clusterdata_trace_format_v3_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineAttribute.ProtoReflect.Descriptor instead.
func (*MachineAttribute) Descriptor() ([]byte, []int) {
	return file_clusterdata_trace_format_v3_proto_rawDescGZIP(), []int{5}
}

func (x *MachineAttribute) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *MachineAttribute) GetMachineId() int64 {
	if x != nil && x.MachineId != nil {
		return *x.MachineId
	}
	return 0
}

func (x *MachineAttribute) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MachineAttribute) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *MachineAttribute) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

// Information about resource consumption (usage) during a sample window
// (which is typically 300s, but may be shorter if the instance started
// and/or ended during a measurement window).
type InstanceUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sample window end points, in microseconds since the start of the trace.
	StartTime *int64 `protobuf:"varint,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime   *int64 `protobuf:"varint,2,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	// ID of collection that this instance belongs to.
	CollectionId *int64 `protobuf:"varint,3,opt,name=collection_id,json=collectionId" json:"collection_id,omitempty"`
	// Index of this instance's position in that collection (starts at 0).
	InstanceIndex *int32 `protobuf:"varint,4,opt,name=instance_index,json=instanceIndex" json:"instance_index,omitempty"`
	// Unique ID of the machine on which the instance has been placed.
	MachineId *int64 `protobuf:"varint,5,opt,name=machine_id,json=machineId" json:"machine_id,omitempty"`
	// ID and index of the alloc collection + instance in which this instance
	// is running, or NO_ALLOC_COLLECTION / NO_ALLOC_INDEX if it is not
	// running inside an alloc.
	AllocCollectionId  *int64 `protobuf:"varint,6,opt,name=alloc_collection_id,json=allocCollectionId" json:"alloc_collection_id,omitempty"`
	AllocInstanceIndex *int64 `protobuf:"varint,7,opt,name=alloc_instance_index,json=allocInstanceIndex" json:"alloc_instance_index,omitempty"`
	// Type of the collection that this instance belongs to.
	CollectionType *CollectionType `protobuf:"varint,8,opt,name=collection_type,json=collectionType,enum=google.cluster_data.CollectionType" json:"collection_type,omitempty"`
	// Average (mean) usage over the measurement period.
	AverageUsage *Resources `protobuf:"bytes,9,opt,name=average_usage,json=averageUsage" json:"average_usage,omitempty"`
	// Observed maximum usage over the measurement period.
	// This measurement may be fully or partially missing in some cases.
	MaximumUsage *Resources `protobuf:"bytes,10,opt,name=maximum_usage,json=maximumUsage" json:"maximum_usage,omitempty"`
	// Observed CPU usage during a randomly-sampled second within the measurement
	// window. (No memory data is provided here.)
	RandomSampleUsage *Resources `protobuf:"bytes,11,opt,name=random_sample_usage,json=randomSampleUsage" json:"random_sample_usage,omitempty"`
	// The memory limit imposed on this instance; normally, it will not be
	// allowed to exceed this amount of memory.
	AssignedMemory *float32 `protobuf:"fixed32,12,opt,name=assigned_memory,json=assignedMemory" json:"assigned_memory,omitempty"`
	// Amount of memory that is used for the instance's file page cache in the OS
	// kernel.
	PageCacheMemory *float32 `protobuf:"fixed32,13,opt,name=page_cache_memory,json=pageCacheMemory" json:"page_cache_memory,omitempty"`
	// Average (mean) number of processor and memory cycles per instruction.
	CyclesPerInstruction         *float32 `protobuf:"fixed32,14,opt,name=cycles_per_instruction,json=cyclesPerInstruction" json:"cycles_per_instruction,omitempty"`
	MemoryAccessesPerInstruction *float32 `protobuf:"fixed32,15,opt,name=memory_accesses_per_instruction,json=memoryAccessesPerInstruction" json:"memory_accesses_per_instruction,omitempty"`
	// The average (mean) number of data samples collected per second
	// (e.g., sample_rate=0.5 means a sample every 2 seconds on average).
	SampleRate *float32 `protobuf:"fixed32,16,opt,name=sample_rate,json=sampleRate" json:"sample_rate,omitempty"`
	// CPU usage percentile data.
	// The cpu_usage_distribution vector contains 10 elements, representing
	// 0%ile (aka min), 10%ile, 20%ile, ... 90%ile, 100%ile (aka max) of the
	// normalized CPU usage in NCUs.
	// Note that the 100%ile may not exactly match the maximum_usage
	// value because of interpolation effects.
	CpuUsageDistribution []float32 `protobuf:"fixed32,17,rep,name=cpu_usage_distribution,json=cpuUsageDistribution" json:"cpu_usage_distribution,omitempty"`
	// The tail_cpu_usage_distribution vector contains 9 elements, representing
	// 91%ile, 92%ile, 93%ile, ... 98%ile, 99%ile of the normalized CPU resource
	// usage in NCUs.
	TailCpuUsageDistribution []float32 `protobuf:"fixed32,18,rep,name=tail_cpu_usage_distribution,json=tailCpuUsageDistribution" json:"tail_cpu_usage_distribution,omitempty"`
}

func (x *InstanceUsage) Reset() {
	*x = InstanceUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clusterdata_trace_format_v3_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceUsage) ProtoMessage() {}

func (x *InstanceUsage) ProtoReflect() protoreflect.Message {
	mi := &file_clusterdata_trace_format_v3_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceUsage.ProtoReflect.Descriptor instead.
func (*InstanceUsage) Descriptor() ([]byte, []int) {
	return file_clusterdata_trace_format_v3_proto_rawDescGZIP(), []int{6}
}

func (x *InstanceUsage) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *InstanceUsage) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *InstanceUsage) GetCollectionId() int64 {
	if x != nil && x.CollectionId != nil {
		return *x.CollectionId
	}
	return 0
}

func (x *InstanceUsage) GetInstanceIndex() int32 {
	if x != nil && x.InstanceIndex != nil {
		return *x.InstanceIndex
	}
	return 0
}

func (x *InstanceUsage) GetMachineId() int64 {
	if x != nil && x.MachineId != nil {
		return *x.MachineId
	}
	return 0
}

func (x *InstanceUsage) GetAllocCollectionId() int64 {
	if x != nil && x.AllocCollectionId != nil {
		return *x.AllocCollectionId
	}
	return 0
}

func (x *InstanceUsage) GetAllocInstanceIndex() int64 {
	if x != nil && x.AllocInstanceIndex != nil {
		return *x.AllocInstanceIndex
	}
	return 0
}

func (x *InstanceUsage) GetCollectionType() CollectionType {
	if x != nil && x.CollectionType != nil {
		return *x.CollectionType
	}
	return CollectionType_JOB
}

func (x *InstanceUsage) GetAverageUsage() *Resources {
	if x != nil {
		return x.AverageUsage
	}
	return nil
}

func (x *InstanceUsage) GetMaximumUsage() *Resources {
	if x != nil {
		return x.MaximumUsage
	}
	return nil
}

func (x *InstanceUsage) GetRandomSampleUsage() *Resources {
	if x != nil {
		return x.RandomSampleUsage
	}
	return nil
}

func (x *InstanceUsage) GetAssignedMemory() float32 {
	if x != nil && x.AssignedMemory != nil {
		return *x.AssignedMemory
	}
	return 0
}

func (x *InstanceUsage) GetPageCacheMemory() float32 {
	if x != nil && x.PageCacheMemory != nil {
		return *x.PageCacheMemory
	}
	return 0
}

func (x *InstanceUsage) GetCyclesPerInstruction() float32 {
	if x != nil && x.CyclesPerInstruction != nil {
		return *x.CyclesPerInstruction
	}
	return 0
}

func (x *InstanceUsage) GetMemoryAccessesPerInstruction() float32 {
	if x != nil && x.MemoryAccessesPerInstruction != nil {
		return *x.MemoryAccessesPerInstruction
	}
	return 0
}

func (x *InstanceUsage) GetSampleRate() float32 {
	if x != nil && x.SampleRate != nil {
		return *x.SampleRate
	}
	return 0
}

func (x *InstanceUsage) GetCpuUsageDistribution() []float32 {
	if x != nil {
		return x.CpuUsageDistribution
	}
	return nil
}

func (x *InstanceUsage) GetTailCpuUsageDistribution() []float32 {
	if x != nil {
		return x.TailCpuUsageDistribution
	}
	return nil
}

var File_clusterdata_trace_format_v3_proto protoreflect.FileDescriptor

var file_clusterdata_trace_format_v3_proto_rawDesc = []byte{
	0x0a, 0x21, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x76, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x37, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x70, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x63, 0x70, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x22, 0x9d, 0x02, 0x0a, 0x11, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x4b, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90,
	0x01, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x51, 0x55, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51,
	0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48,
	0x41, 0x4e, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f,
	0x54, 0x48, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x48, 0x41, 0x4e, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x47,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x45, 0x51, 0x55, 0x41,
	0x4c, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x06,
	0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10,
	0x07, 0x22, 0xba, 0x05, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x52, 0x0a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x49, 0x0a, 0x10, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x22, 0xf9,
	0x06, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x52, 0x0a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x03, 0x52, 0x17, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x12, 0x56, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x09,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52,
	0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x22, 0xfa, 0x03, 0x0a, 0x0c, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x3f,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x08,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x08,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x13, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x44,
	0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x03, 0x22, 0x51, 0x0a, 0x11, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4e, 0x41, 0x50, 0x53,
	0x48, 0x4f, 0x54, 0x5f, 0x42, 0x55, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0x89, 0x01, 0x0a, 0x10, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x22, 0xa6, 0x07, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4c, 0x0a, 0x0f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x43, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x13, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x73, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x45, 0x0a, 0x1f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x70, 0x75, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x03, 0x28, 0x02, 0x52, 0x14, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a,
	0x1b, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x18, 0x74, 0x61, 0x69, 0x6c, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x75, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f,
	0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x11, 0x44, 0x45, 0x44,
	0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x10, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x0e, 0x4e, 0x4f, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x5f, 0x49,
	0x4e, 0x44, 0x45, 0x58, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x1a,
	0x02, 0x10, 0x01, 0x2a, 0x28, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x4f, 0x42, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x01, 0x2a, 0x99, 0x01,
	0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x55, 0x42, 0x4d, 0x49, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55, 0x45, 0x55, 0x45,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x56, 0x49, 0x43, 0x54, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c, 0x10,
	0x05, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x06, 0x12, 0x08, 0x0a,
	0x04, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x53, 0x54, 0x10,
	0x08, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x2a, 0xb1, 0x01, 0x0a, 0x0b, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x42, 0x55, 0x54,
	0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x4f, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f,
	0x4f, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x5f, 0x42, 0x55, 0x54, 0x5f, 0x4e, 0x4f,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x4f, 0x4f, 0x5f,
	0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x05, 0x2a, 0x5e, 0x0a,
	0x12, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x45,
	0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x53,
	0x45, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45,
	0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4f, 0x53,
	0x54, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x2a, 0x37, 0x0a,
	0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x42,
	0x41, 0x54, 0x43, 0x48, 0x10, 0x01, 0x2a, 0xa0, 0x01, 0x0a, 0x16, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x24, 0x0a, 0x20, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x43,
	0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x45, 0x52, 0x54, 0x49,
	0x43, 0x41, 0x4c, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x46, 0x46, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x43,
	0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f,
	0x53, 0x43, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x59, 0x5f, 0x41, 0x55,
	0x54, 0x4f, 0x4d, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03,
}

var (
	file_clusterdata_trace_format_v3_proto_rawDescOnce sync.Once
	file_clusterdata_trace_format_v3_proto_rawDescData = file_clusterdata_trace_format_v3_proto_rawDesc
)

func file_clusterdata_trace_format_v3_proto_rawDescGZIP() []byte {
	file_clusterdata_trace_format_v3_proto_rawDescOnce.Do(func() {
		file_clusterdata_trace_format_v3_proto_rawDescData = protoimpl.X.CompressGZIP(file_clusterdata_trace_format_v3_proto_rawDescData)
	})
	return file_clusterdata_trace_format_v3_proto_rawDescData
}

var file_clusterdata_trace_format_v3_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_clusterdata_trace_format_v3_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_clusterdata_trace_format_v3_proto_goTypes = []interface{}{
	(Constants)(0),                      // 0: google.cluster_data.Constants
	(CollectionType)(0),                 // 1: google.cluster_data.CollectionType
	(EventType)(0),                      // 2: google.cluster_data.EventType
	(MissingType)(0),                    // 3: google.cluster_data.MissingType
	(LatencySensitivity)(0),             // 4: google.cluster_data.LatencySensitivity
	(Scheduler)(0),                      // 5: google.cluster_data.Scheduler
	(VerticalScalingSetting)(0),         // 6: google.cluster_data.VerticalScalingSetting
	(MachineConstraint_Relation)(0),     // 7: google.cluster_data.MachineConstraint.Relation
	(MachineEvent_EventType)(0),         // 8: google.cluster_data.MachineEvent.EventType
	(MachineEvent_MissingDataReason)(0), // 9: google.cluster_data.MachineEvent.MissingDataReason
	(*Resources)(nil),                   // 10: google.cluster_data.Resources
	(*MachineConstraint)(nil),           // 11: google.cluster_data.MachineConstraint
	(*InstanceEvent)(nil),               // 12: google.cluster_data.InstanceEvent
	(*CollectionEvent)(nil),             // 13: google.cluster_data.CollectionEvent
	(*MachineEvent)(nil),                // 14: google.cluster_data.MachineEvent
	(*MachineAttribute)(nil),            // 15: google.cluster_data.MachineAttribute
	(*InstanceUsage)(nil),               // 16: google.cluster_data.InstanceUsage
}
var file_clusterdata_trace_format_v3_proto_depIdxs = []int32{
	7,  // 0: google.cluster_data.MachineConstraint.relation:type_name -> google.cluster_data.MachineConstraint.Relation
	2,  // 1: google.cluster_data.InstanceEvent.type:type_name -> google.cluster_data.EventType
	4,  // 2: google.cluster_data.InstanceEvent.scheduling_class:type_name -> google.cluster_data.LatencySensitivity
	3,  // 3: google.cluster_data.InstanceEvent.missing_type:type_name -> google.cluster_data.MissingType
	1,  // 4: google.cluster_data.InstanceEvent.collection_type:type_name -> google.cluster_data.CollectionType
	10, // 5: google.cluster_data.InstanceEvent.resource_request:type_name -> google.cluster_data.Resources
	11, // 6: google.cluster_data.InstanceEvent.constraint:type_name -> google.cluster_data.MachineConstraint
	2,  // 7: google.cluster_data.CollectionEvent.type:type_name -> google.cluster_data.EventType
	4,  // 8: google.cluster_data.CollectionEvent.scheduling_class:type_name -> google.cluster_data.LatencySensitivity
	3,  // 9: google.cluster_data.CollectionEvent.missing_type:type_name -> google.cluster_data.MissingType
	1,  // 10: google.cluster_data.CollectionEvent.collection_type:type_name -> google.cluster_data.CollectionType
	6,  // 11: google.cluster_data.CollectionEvent.vertical_scaling:type_name -> google.cluster_data.VerticalScalingSetting
	5,  // 12: google.cluster_data.CollectionEvent.scheduler:type_name -> google.cluster_data.Scheduler
	8,  // 13: google.cluster_data.MachineEvent.type:type_name -> google.cluster_data.MachineEvent.EventType
	10, // 14: google.cluster_data.MachineEvent.capacity:type_name -> google.cluster_data.Resources
	9,  // 15: google.cluster_data.MachineEvent.missing_data_reason:type_name -> google.cluster_data.MachineEvent.MissingDataReason
	1,  // 16: google.cluster_data.InstanceUsage.collection_type:type_name -> google.cluster_data.CollectionType
	10, // 17: google.cluster_data.InstanceUsage.average_usage:type_name -> google.cluster_data.Resources
	10, // 18: google.cluster_data.InstanceUsage.maximum_usage:type_name -> google.cluster_data.Resources
	10, // 19: google.cluster_data.InstanceUsage.random_sample_usage:type_name -> google.cluster_data.Resources
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_clusterdata_trace_format_v3_proto_init() }
func file_clusterdata_trace_format_v3_proto_init() {
	if File_clusterdata_trace_format_v3_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_clusterdata_trace_format_v3_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clusterdata_trace_format_v3_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clusterdata_trace_format_v3_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clusterdata_trace_format_v3_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clusterdata_trace_format_v3_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clusterdata_trace_format_v3_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clusterdata_trace_format_v3_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_clusterdata_trace_format_v3_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_clusterdata_trace_format_v3_proto_goTypes,
		DependencyIndexes: file_clusterdata_trace_format_v3_proto_depIdxs,
		EnumInfos:         file_clusterdata_trace_format_v3_proto_enumTypes,
		MessageInfos:      file_clusterdata_trace_format_v3_proto_msgTypes,
	}.Build()
	File_clusterdata_trace_format_v3_proto = out.File
	file_clusterdata_trace_format_v3_proto_rawDesc = nil
	file_clusterdata_trace_format_v3_proto_goTypes = nil
	file_clusterdata_trace_format_v3_proto_depIdxs = nil
}
